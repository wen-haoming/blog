(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{268:function(t,a,v){"use strict";v.r(a);var e=v(38),_=Object(e.a)({},function(){var t=this,a=t.$createElement,v=t._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h2",{attrs:{id:"什么是进程与线程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#什么是进程与线程","aria-hidden":"true"}},[t._v("#")]),t._v(" 什么是进程与线程")]),t._v(" "),v("blockquote",[v("p",[t._v("chrome一启动 为什么就启动了4个进程？")]),t._v(" "),v("ol",[v("li",[v("p",[t._v("什么是并行处理")])]),t._v(" "),v("li",[v("p",[t._v("进程和线程是什么？")])]),t._v(" "),v("li",[v("p",[t._v("进程和线程的关系？")])])])]),t._v(" "),v("h2",{attrs:{id:"什么是并行处理？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#什么是并行处理？","aria-hidden":"true"}},[t._v("#")]),t._v(" 什么是并行处理？")]),t._v(" "),v("p",[t._v("首先一段代码的执行可以分为"),v("strong",[t._v("单线程")]),t._v("和"),v("strong",[t._v("多线程")]),t._v("，")]),t._v(" "),v("ol",[v("li",[t._v("如果使用单线程处理的话就是每一行都按顺序执行。")]),t._v(" "),v("li",[t._v("多线程处理会把任务切分，同时使用多个线程来同时执行该任务。")])]),t._v(" "),v("p",[t._v("因此使用并行处理能大幅提升性能")]),t._v(" "),v("h2",{attrs:{id:"线程vs进程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#线程vs进程","aria-hidden":"true"}},[t._v("#")]),t._v(" 线程vs进程")]),t._v(" "),v("p",[v("strong",[t._v("多线程可以并行处理任务，但是线程是不能单独存在的，它是由进程来启动和管理的")])]),t._v(" "),v("h3",{attrs:{id:"什么是进程？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#什么是进程？","aria-hidden":"true"}},[t._v("#")]),t._v(" 什么是进程？")]),t._v(" "),v("blockquote",[v("p",[t._v("一个浏览器其实就是一个小型的操作系统")])]),t._v(" "),v("p",[v("strong",[t._v("一个进程就是一个程序运行的实例")]),t._v("，详细解释就是，启动一个程序的时候，操作系统会为该程序创建一块内存，用来存放代码、运行中的数据和一个执行任务的主线程，我们把这样的一个"),v("strong",[t._v("运行的环境")]),t._v("叫"),v("strong",[t._v("进程")]),t._v("。")]),t._v(" "),v("p",[t._v("当一个进程关闭的时候，操作系统会回收进程所占用的内存。线程是依附于进程的，而进程中使用多线程并行处理能提升运算效率。")]),t._v(" "),v("p",[t._v("进程和线程的4个特点：")]),t._v(" "),v("ol",[v("li",[t._v("进程中任意一线程出错，都会导致整个进程的奔溃。")]),t._v(" "),v("li",[t._v("线程之间共享进程中的数据。")]),t._v(" "),v("li",[t._v("当一个进程关闭之后，操作系统会回收进程所占用的内存。")]),t._v(" "),v("li",[t._v("进程之间的内容相互隔离。")])]),t._v(" "),v("h3",{attrs:{id:"单进程浏览器时代"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#单进程浏览器时代","aria-hidden":"true"}},[t._v("#")]),t._v(" 单进程浏览器时代")]),t._v(" "),v("blockquote",[v("p",[t._v("但进程浏览器是指浏览器的所有功能模块都是运行在同一进程里。")])]),t._v(" "),v("p",[t._v("导致的问题：")]),t._v(" "),v("ol",[v("li",[t._v("不稳定")]),t._v(" "),v("li",[t._v("不流畅")]),t._v(" "),v("li",[t._v("不安全")])]),t._v(" "),v("h3",{attrs:{id:"早期多进程架构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#早期多进程架构","aria-hidden":"true"}},[t._v("#")]),t._v(" 早期多进程架构")]),t._v(" "),v("p",[t._v("解释了本文开头的为什么浏览器打开就有4个进程")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://static001.geekbang.org/resource/image/cd/60/cdc9215e6c6377fc965b7fac8c3ec960.png",alt:"cdc9215e6c6377fc965b7fac8c3ec960"}})]),t._v(" "),v("p",[t._v("多进程架构解决的问题：")]),t._v(" "),v("ol",[v("li",[t._v("进程的隔离，导致每一个都是独立的奔溃而不会影响别的")]),t._v(" "),v("li",[t._v("js运行在渲染进程，就算阻塞了渲染进程也只是影响当前的")]),t._v(" "),v("li",[t._v("安全问题是存放在安全沙箱")])]),t._v(" "),v("h3",{attrs:{id:"目前多进程机构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#目前多进程机构","aria-hidden":"true"}},[t._v("#")]),t._v(" 目前多进程机构")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://static001.geekbang.org/resource/image/b6/fc/b61cab529fa31301bde290813b4587fc.png",alt:"b61cab529fa31301bde290813b4587fc"}})]),t._v(" "),v("p",[t._v("虽然多进程模型提升了浏览器的稳定性，流畅性和安全性，但同样不避免带来一些问题。")]),t._v(" "),v("ul",[v("li",[t._v("更高的资源占用")]),t._v(" "),v("li",[t._v("更复杂的体系架构")])]),t._v(" "),v("h2",{attrs:{id:"问题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#问题","aria-hidden":"true"}},[t._v("#")]),t._v(" 问题")]),t._v(" "),v("p",[t._v("1.即使是如今的多进程架构，我偶尔还会碰到一些由于单个页面卡死最终崩溃导致所有页面崩溃的情况，请问这是什么原因呢")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v('是这样的，通常情况下是一个页面使用一个进程，但是，有一种情况，叫"同一站点(same-site)"，具体地讲，我们将“同一站点”定义为根域名（例如，geekbang.org）加上协议（例如，https:// 或者http://），还包含了该根域名下的所有子域名和不同的端口，比如下面这三个：\n\nhttps://time.geekbang.org\nhttps://www.geekbang.org\nhttps://www.geekbang.org:8080\n都是属于同一站点，因为它们的协议都是https，而根域名也都是geekbang.org。你也许了解同源策略，但是同一站点和同源策略还是存在一些不同地方，在这里你需要了解它们不是同一件事就行了。\n\nChrome的默认策略是，每个标签对应一个渲染进程。但是如果从一个页面打开了新页面，而新页面和当前页面属于同一站点时，那么新页面会复用父页面的渲染进程。官方把这个默认策略叫process-per-site-instance。直白的讲，就是如果几个页面符合同一站点，那么他们将被分配到一个渲染进程里面去。\n\n所以，这种情况下，一个页面崩溃了，会导致同一站点的页面同时崩溃，因为他们使用了同一个渲染进程。\n\n为什么要让他们跑在一个进程里面呢？\n\n因为在一个渲染进程里面，他们就会共享JS的执行环境，也就是说A页面可以直接在B页面中执行脚本。因为是同一家的站点，所以是有这个需求的。\n')])])])])},[],!1,null,null,null);a.default=_.exports}}]);